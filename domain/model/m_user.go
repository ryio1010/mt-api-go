// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MUser is an object representing the database table.
type MUser struct {
	Userid   string      `boil:"userid" json:"userid" toml:"userid" yaml:"userid"`
	Username string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	Password string      `boil:"password" json:"password" toml:"password" yaml:"password"`
	Regid    null.String `boil:"regid" json:"regid,omitempty" toml:"regid" yaml:"regid,omitempty"`
	Regdate  null.Time   `boil:"regdate" json:"regdate,omitempty" toml:"regdate" yaml:"regdate,omitempty"`
	Updid    null.String `boil:"updid" json:"updid,omitempty" toml:"updid" yaml:"updid,omitempty"`
	Upddate  null.Time   `boil:"upddate" json:"upddate,omitempty" toml:"upddate" yaml:"upddate,omitempty"`
	Version  int         `boil:"version" json:"version" toml:"version" yaml:"version"`

	R *mUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MUserColumns = struct {
	Userid   string
	Username string
	Password string
	Regid    string
	Regdate  string
	Updid    string
	Upddate  string
	Version  string
}{
	Userid:   "userid",
	Username: "username",
	Password: "password",
	Regid:    "regid",
	Regdate:  "regdate",
	Updid:    "updid",
	Upddate:  "upddate",
	Version:  "version",
}

var MUserTableColumns = struct {
	Userid   string
	Username string
	Password string
	Regid    string
	Regdate  string
	Updid    string
	Upddate  string
	Version  string
}{
	Userid:   "m_user.userid",
	Username: "m_user.username",
	Password: "m_user.password",
	Regid:    "m_user.regid",
	Regdate:  "m_user.regdate",
	Updid:    "m_user.updid",
	Upddate:  "m_user.upddate",
	Version:  "m_user.version",
}

// Generated where

var MUserWhere = struct {
	Userid   whereHelperstring
	Username whereHelperstring
	Password whereHelperstring
	Regid    whereHelpernull_String
	Regdate  whereHelpernull_Time
	Updid    whereHelpernull_String
	Upddate  whereHelpernull_Time
	Version  whereHelperint
}{
	Userid:   whereHelperstring{field: "\"muscle_tracking_go\".\"m_user\".\"userid\""},
	Username: whereHelperstring{field: "\"muscle_tracking_go\".\"m_user\".\"username\""},
	Password: whereHelperstring{field: "\"muscle_tracking_go\".\"m_user\".\"password\""},
	Regid:    whereHelpernull_String{field: "\"muscle_tracking_go\".\"m_user\".\"regid\""},
	Regdate:  whereHelpernull_Time{field: "\"muscle_tracking_go\".\"m_user\".\"regdate\""},
	Updid:    whereHelpernull_String{field: "\"muscle_tracking_go\".\"m_user\".\"updid\""},
	Upddate:  whereHelpernull_Time{field: "\"muscle_tracking_go\".\"m_user\".\"upddate\""},
	Version:  whereHelperint{field: "\"muscle_tracking_go\".\"m_user\".\"version\""},
}

// MUserRels is where relationship names are stored.
var MUserRels = struct {
	UseridMMenus        string
	UseridTTraininglogs string
}{
	UseridMMenus:        "UseridMMenus",
	UseridTTraininglogs: "UseridTTraininglogs",
}

// mUserR is where relationships are stored.
type mUserR struct {
	UseridMMenus        MMenuSlice        `boil:"UseridMMenus" json:"UseridMMenus" toml:"UseridMMenus" yaml:"UseridMMenus"`
	UseridTTraininglogs TTraininglogSlice `boil:"UseridTTraininglogs" json:"UseridTTraininglogs" toml:"UseridTTraininglogs" yaml:"UseridTTraininglogs"`
}

// NewStruct creates a new relationship struct
func (*mUserR) NewStruct() *mUserR {
	return &mUserR{}
}

func (r *mUserR) GetUseridMMenus() MMenuSlice {
	if r == nil {
		return nil
	}
	return r.UseridMMenus
}

func (r *mUserR) GetUseridTTraininglogs() TTraininglogSlice {
	if r == nil {
		return nil
	}
	return r.UseridTTraininglogs
}

// mUserL is where Load methods for each relationship are stored.
type mUserL struct{}

var (
	mUserAllColumns            = []string{"userid", "username", "password", "regid", "regdate", "updid", "upddate", "version"}
	mUserColumnsWithoutDefault = []string{"userid", "username", "password", "version"}
	mUserColumnsWithDefault    = []string{"regid", "regdate", "updid", "upddate"}
	mUserPrimaryKeyColumns     = []string{"userid"}
	mUserGeneratedColumns      = []string{}
)

type (
	// MUserSlice is an alias for a slice of pointers to MUser.
	// This should almost always be used instead of []MUser.
	MUserSlice []*MUser
	// MUserHook is the signature for custom MUser hook methods
	MUserHook func(context.Context, boil.ContextExecutor, *MUser) error

	mUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mUserType                 = reflect.TypeOf(&MUser{})
	mUserMapping              = queries.MakeStructMapping(mUserType)
	mUserPrimaryKeyMapping, _ = queries.BindMapping(mUserType, mUserMapping, mUserPrimaryKeyColumns)
	mUserInsertCacheMut       sync.RWMutex
	mUserInsertCache          = make(map[string]insertCache)
	mUserUpdateCacheMut       sync.RWMutex
	mUserUpdateCache          = make(map[string]updateCache)
	mUserUpsertCacheMut       sync.RWMutex
	mUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mUserAfterSelectHooks []MUserHook

var mUserBeforeInsertHooks []MUserHook
var mUserAfterInsertHooks []MUserHook

var mUserBeforeUpdateHooks []MUserHook
var mUserAfterUpdateHooks []MUserHook

var mUserBeforeDeleteHooks []MUserHook
var mUserAfterDeleteHooks []MUserHook

var mUserBeforeUpsertHooks []MUserHook
var mUserAfterUpsertHooks []MUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMUserHook registers your hook function for all future operations.
func AddMUserHook(hookPoint boil.HookPoint, mUserHook MUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mUserAfterSelectHooks = append(mUserAfterSelectHooks, mUserHook)
	case boil.BeforeInsertHook:
		mUserBeforeInsertHooks = append(mUserBeforeInsertHooks, mUserHook)
	case boil.AfterInsertHook:
		mUserAfterInsertHooks = append(mUserAfterInsertHooks, mUserHook)
	case boil.BeforeUpdateHook:
		mUserBeforeUpdateHooks = append(mUserBeforeUpdateHooks, mUserHook)
	case boil.AfterUpdateHook:
		mUserAfterUpdateHooks = append(mUserAfterUpdateHooks, mUserHook)
	case boil.BeforeDeleteHook:
		mUserBeforeDeleteHooks = append(mUserBeforeDeleteHooks, mUserHook)
	case boil.AfterDeleteHook:
		mUserAfterDeleteHooks = append(mUserAfterDeleteHooks, mUserHook)
	case boil.BeforeUpsertHook:
		mUserBeforeUpsertHooks = append(mUserBeforeUpsertHooks, mUserHook)
	case boil.AfterUpsertHook:
		mUserAfterUpsertHooks = append(mUserAfterUpsertHooks, mUserHook)
	}
}

// One returns a single mUser record from the query.
func (q mUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MUser, error) {
	o := &MUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for m_user")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MUser records from the query.
func (q mUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (MUserSlice, error) {
	var o []*MUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MUser slice")
	}

	if len(mUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MUser records in the query.
func (q mUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count m_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if m_user exists")
	}

	return count > 0, nil
}

// UseridMMenus retrieves all the m_menu's MMenus with an executor via userid column.
func (o *MUser) UseridMMenus(mods ...qm.QueryMod) mMenuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"muscle_tracking_go\".\"m_menu\".\"userid\"=?", o.Userid),
	)

	return MMenus(queryMods...)
}

// UseridTTraininglogs retrieves all the t_traininglog's TTraininglogs with an executor via userid column.
func (o *MUser) UseridTTraininglogs(mods ...qm.QueryMod) tTraininglogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"muscle_tracking_go\".\"t_traininglog\".\"userid\"=?", o.Userid),
	)

	return TTraininglogs(queryMods...)
}

// LoadUseridMMenus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mUserL) LoadUseridMMenus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMUser interface{}, mods queries.Applicator) error {
	var slice []*MUser
	var object *MUser

	if singular {
		var ok bool
		object, ok = maybeMUser.(*MUser)
		if !ok {
			object = new(MUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMUser))
			}
		}
	} else {
		s, ok := maybeMUser.(*[]*MUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mUserR{}
		}
		args = append(args, object.Userid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mUserR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Userid) {
					continue Outer
				}
			}

			args = append(args, obj.Userid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`muscle_tracking_go.m_menu`),
		qm.WhereIn(`muscle_tracking_go.m_menu.userid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load m_menu")
	}

	var resultSlice []*MMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice m_menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on m_menu")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for m_menu")
	}

	if len(mMenuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UseridMMenus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mMenuR{}
			}
			foreign.R.UseridMUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Userid, foreign.Userid) {
				local.R.UseridMMenus = append(local.R.UseridMMenus, foreign)
				if foreign.R == nil {
					foreign.R = &mMenuR{}
				}
				foreign.R.UseridMUser = local
				break
			}
		}
	}

	return nil
}

// LoadUseridTTraininglogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mUserL) LoadUseridTTraininglogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMUser interface{}, mods queries.Applicator) error {
	var slice []*MUser
	var object *MUser

	if singular {
		var ok bool
		object, ok = maybeMUser.(*MUser)
		if !ok {
			object = new(MUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMUser))
			}
		}
	} else {
		s, ok := maybeMUser.(*[]*MUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mUserR{}
		}
		args = append(args, object.Userid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mUserR{}
			}

			for _, a := range args {
				if a == obj.Userid {
					continue Outer
				}
			}

			args = append(args, obj.Userid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`muscle_tracking_go.t_traininglog`),
		qm.WhereIn(`muscle_tracking_go.t_traininglog.userid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load t_traininglog")
	}

	var resultSlice []*TTraininglog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice t_traininglog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on t_traininglog")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for t_traininglog")
	}

	if len(tTraininglogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UseridTTraininglogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tTraininglogR{}
			}
			foreign.R.UseridMUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Userid == foreign.Userid {
				local.R.UseridTTraininglogs = append(local.R.UseridTTraininglogs, foreign)
				if foreign.R == nil {
					foreign.R = &tTraininglogR{}
				}
				foreign.R.UseridMUser = local
				break
			}
		}
	}

	return nil
}

// AddUseridMMenus adds the given related objects to the existing relationships
// of the m_user, optionally inserting them as new records.
// Appends related to o.R.UseridMMenus.
// Sets related.R.UseridMUser appropriately.
func (o *MUser) AddUseridMMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MMenu) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Userid, o.Userid)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"muscle_tracking_go\".\"m_menu\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
				strmangle.WhereClause("\"", "\"", 2, mMenuPrimaryKeyColumns),
			)
			values := []interface{}{o.Userid, rel.Menuid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Userid, o.Userid)
		}
	}

	if o.R == nil {
		o.R = &mUserR{
			UseridMMenus: related,
		}
	} else {
		o.R.UseridMMenus = append(o.R.UseridMMenus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mMenuR{
				UseridMUser: o,
			}
		} else {
			rel.R.UseridMUser = o
		}
	}
	return nil
}

// SetUseridMMenus removes all previously related items of the
// m_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UseridMUser's UseridMMenus accordingly.
// Replaces o.R.UseridMMenus with related.
// Sets related.R.UseridMUser's UseridMMenus accordingly.
func (o *MUser) SetUseridMMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MMenu) error {
	query := "update \"muscle_tracking_go\".\"m_menu\" set \"userid\" = null where \"userid\" = $1"
	values := []interface{}{o.Userid}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UseridMMenus {
			queries.SetScanner(&rel.Userid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UseridMUser = nil
		}
		o.R.UseridMMenus = nil
	}

	return o.AddUseridMMenus(ctx, exec, insert, related...)
}

// RemoveUseridMMenus relationships from objects passed in.
// Removes related items from R.UseridMMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.UseridMUser.
func (o *MUser) RemoveUseridMMenus(ctx context.Context, exec boil.ContextExecutor, related ...*MMenu) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Userid, nil)
		if rel.R != nil {
			rel.R.UseridMUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("userid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UseridMMenus {
			if rel != ri {
				continue
			}

			ln := len(o.R.UseridMMenus)
			if ln > 1 && i < ln-1 {
				o.R.UseridMMenus[i] = o.R.UseridMMenus[ln-1]
			}
			o.R.UseridMMenus = o.R.UseridMMenus[:ln-1]
			break
		}
	}

	return nil
}

// AddUseridTTraininglogs adds the given related objects to the existing relationships
// of the m_user, optionally inserting them as new records.
// Appends related to o.R.UseridTTraininglogs.
// Sets related.R.UseridMUser appropriately.
func (o *MUser) AddUseridTTraininglogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TTraininglog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Userid = o.Userid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"muscle_tracking_go\".\"t_traininglog\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
				strmangle.WhereClause("\"", "\"", 2, tTraininglogPrimaryKeyColumns),
			)
			values := []interface{}{o.Userid, rel.Logid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Userid = o.Userid
		}
	}

	if o.R == nil {
		o.R = &mUserR{
			UseridTTraininglogs: related,
		}
	} else {
		o.R.UseridTTraininglogs = append(o.R.UseridTTraininglogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tTraininglogR{
				UseridMUser: o,
			}
		} else {
			rel.R.UseridMUser = o
		}
	}
	return nil
}

// MUsers retrieves all the records using an executor.
func MUsers(mods ...qm.QueryMod) mUserQuery {
	mods = append(mods, qm.From("\"muscle_tracking_go\".\"m_user\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"muscle_tracking_go\".\"m_user\".*"})
	}

	return mUserQuery{q}
}

// FindMUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMUser(ctx context.Context, exec boil.ContextExecutor, userid string, selectCols ...string) (*MUser, error) {
	mUserObj := &MUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"muscle_tracking_go\".\"m_user\" where \"userid\"=$1", sel,
	)

	q := queries.Raw(query, userid)

	err := q.Bind(ctx, exec, mUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from m_user")
	}

	if err = mUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mUserObj, err
	}

	return mUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no m_user provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mUserInsertCacheMut.RLock()
	cache, cached := mUserInsertCache[key]
	mUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mUserAllColumns,
			mUserColumnsWithDefault,
			mUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mUserType, mUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mUserType, mUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"muscle_tracking_go\".\"m_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"muscle_tracking_go\".\"m_user\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into m_user")
	}

	if !cached {
		mUserInsertCacheMut.Lock()
		mUserInsertCache[key] = cache
		mUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mUserUpdateCacheMut.RLock()
	cache, cached := mUserUpdateCache[key]
	mUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mUserAllColumns,
			mUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update m_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"m_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mUserType, mUserMapping, append(wl, mUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update m_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for m_user")
	}

	if !cached {
		mUserUpdateCacheMut.Lock()
		mUserUpdateCache[key] = cache
		mUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for m_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for m_user")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"m_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in mUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all mUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no m_user provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mUserUpsertCacheMut.RLock()
	cache, cached := mUserUpsertCache[key]
	mUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mUserAllColumns,
			mUserColumnsWithDefault,
			mUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mUserAllColumns,
			mUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert m_user, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mUserPrimaryKeyColumns))
			copy(conflict, mUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"muscle_tracking_go\".\"m_user\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mUserType, mUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mUserType, mUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert m_user")
	}

	if !cached {
		mUserUpsertCacheMut.Lock()
		mUserUpsertCache[key] = cache
		mUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mUserPrimaryKeyMapping)
	sql := "DELETE FROM \"muscle_tracking_go\".\"m_user\" WHERE \"userid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from m_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for m_user")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no mUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from m_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for m_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"muscle_tracking_go\".\"m_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for m_user")
	}

	if len(mUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMUser(ctx, exec, o.Userid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"muscle_tracking_go\".\"m_user\".* FROM \"muscle_tracking_go\".\"m_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MUserSlice")
	}

	*o = slice

	return nil
}

// MUserExists checks if the MUser row exists.
func MUserExists(ctx context.Context, exec boil.ContextExecutor, userid string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"muscle_tracking_go\".\"m_user\" where \"userid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userid)
	}
	row := exec.QueryRowContext(ctx, sql, userid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if m_user exists")
	}

	return exists, nil
}
