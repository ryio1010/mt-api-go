// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TBodycomp is an object representing the database table.
type TBodycomp struct {
	Userid       string      `boil:"userid" json:"userid" toml:"userid" yaml:"userid"`
	Trainingdate string      `boil:"trainingdate" json:"trainingdate" toml:"trainingdate" yaml:"trainingdate"`
	Height       float64     `boil:"height" json:"height" toml:"height" yaml:"height"`
	Weight       float64     `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	BFP          float64     `boil:"bfp" json:"bfp" toml:"bfp" yaml:"bfp"`
	Regid        null.String `boil:"regid" json:"regid,omitempty" toml:"regid" yaml:"regid,omitempty"`
	Regdate      null.Time   `boil:"regdate" json:"regdate,omitempty" toml:"regdate" yaml:"regdate,omitempty"`
	Updid        null.String `boil:"updid" json:"updid,omitempty" toml:"updid" yaml:"updid,omitempty"`
	Upddate      null.Time   `boil:"upddate" json:"upddate,omitempty" toml:"upddate" yaml:"upddate,omitempty"`
	Version      int         `boil:"version" json:"version" toml:"version" yaml:"version"`

	R *tBodycompR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tBodycompL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TBodycompColumns = struct {
	Userid       string
	Trainingdate string
	Height       string
	Weight       string
	BFP          string
	Regid        string
	Regdate      string
	Updid        string
	Upddate      string
	Version      string
}{
	Userid:       "userid",
	Trainingdate: "trainingdate",
	Height:       "height",
	Weight:       "weight",
	BFP:          "bfp",
	Regid:        "regid",
	Regdate:      "regdate",
	Updid:        "updid",
	Upddate:      "upddate",
	Version:      "version",
}

var TBodycompTableColumns = struct {
	Userid       string
	Trainingdate string
	Height       string
	Weight       string
	BFP          string
	Regid        string
	Regdate      string
	Updid        string
	Upddate      string
	Version      string
}{
	Userid:       "t_bodycomp.userid",
	Trainingdate: "t_bodycomp.trainingdate",
	Height:       "t_bodycomp.height",
	Weight:       "t_bodycomp.weight",
	BFP:          "t_bodycomp.bfp",
	Regid:        "t_bodycomp.regid",
	Regdate:      "t_bodycomp.regdate",
	Updid:        "t_bodycomp.updid",
	Upddate:      "t_bodycomp.upddate",
	Version:      "t_bodycomp.version",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TBodycompWhere = struct {
	Userid       whereHelperstring
	Trainingdate whereHelperstring
	Height       whereHelperfloat64
	Weight       whereHelperfloat64
	BFP          whereHelperfloat64
	Regid        whereHelpernull_String
	Regdate      whereHelpernull_Time
	Updid        whereHelpernull_String
	Upddate      whereHelpernull_Time
	Version      whereHelperint
}{
	Userid:       whereHelperstring{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"userid\""},
	Trainingdate: whereHelperstring{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"trainingdate\""},
	Height:       whereHelperfloat64{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"height\""},
	Weight:       whereHelperfloat64{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"weight\""},
	BFP:          whereHelperfloat64{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"bfp\""},
	Regid:        whereHelpernull_String{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"regid\""},
	Regdate:      whereHelpernull_Time{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"regdate\""},
	Updid:        whereHelpernull_String{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"updid\""},
	Upddate:      whereHelpernull_Time{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"upddate\""},
	Version:      whereHelperint{field: "\"muscle_tracking_go\".\"t_bodycomp\".\"version\""},
}

// TBodycompRels is where relationship names are stored.
var TBodycompRels = struct {
}{}

// tBodycompR is where relationships are stored.
type tBodycompR struct {
}

// NewStruct creates a new relationship struct
func (*tBodycompR) NewStruct() *tBodycompR {
	return &tBodycompR{}
}

// tBodycompL is where Load methods for each relationship are stored.
type tBodycompL struct{}

var (
	tBodycompAllColumns            = []string{"userid", "trainingdate", "height", "weight", "bfp", "regid", "regdate", "updid", "upddate", "version"}
	tBodycompColumnsWithoutDefault = []string{"userid", "trainingdate", "height", "weight", "bfp", "version"}
	tBodycompColumnsWithDefault    = []string{"regid", "regdate", "updid", "upddate"}
	tBodycompPrimaryKeyColumns     = []string{"userid", "trainingdate"}
	tBodycompGeneratedColumns      = []string{}
)

type (
	// TBodycompSlice is an alias for a slice of pointers to TBodycomp.
	// This should almost always be used instead of []TBodycomp.
	TBodycompSlice []*TBodycomp
	// TBodycompHook is the signature for custom TBodycomp hook methods
	TBodycompHook func(context.Context, boil.ContextExecutor, *TBodycomp) error

	tBodycompQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tBodycompType                 = reflect.TypeOf(&TBodycomp{})
	tBodycompMapping              = queries.MakeStructMapping(tBodycompType)
	tBodycompPrimaryKeyMapping, _ = queries.BindMapping(tBodycompType, tBodycompMapping, tBodycompPrimaryKeyColumns)
	tBodycompInsertCacheMut       sync.RWMutex
	tBodycompInsertCache          = make(map[string]insertCache)
	tBodycompUpdateCacheMut       sync.RWMutex
	tBodycompUpdateCache          = make(map[string]updateCache)
	tBodycompUpsertCacheMut       sync.RWMutex
	tBodycompUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tBodycompAfterSelectHooks []TBodycompHook

var tBodycompBeforeInsertHooks []TBodycompHook
var tBodycompAfterInsertHooks []TBodycompHook

var tBodycompBeforeUpdateHooks []TBodycompHook
var tBodycompAfterUpdateHooks []TBodycompHook

var tBodycompBeforeDeleteHooks []TBodycompHook
var tBodycompAfterDeleteHooks []TBodycompHook

var tBodycompBeforeUpsertHooks []TBodycompHook
var tBodycompAfterUpsertHooks []TBodycompHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TBodycomp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBodycompAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TBodycomp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBodycompBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TBodycomp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBodycompAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TBodycomp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBodycompBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TBodycomp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBodycompAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TBodycomp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBodycompBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TBodycomp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBodycompAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TBodycomp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBodycompBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TBodycomp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBodycompAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTBodycompHook registers your hook function for all future operations.
func AddTBodycompHook(hookPoint boil.HookPoint, tBodycompHook TBodycompHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tBodycompAfterSelectHooks = append(tBodycompAfterSelectHooks, tBodycompHook)
	case boil.BeforeInsertHook:
		tBodycompBeforeInsertHooks = append(tBodycompBeforeInsertHooks, tBodycompHook)
	case boil.AfterInsertHook:
		tBodycompAfterInsertHooks = append(tBodycompAfterInsertHooks, tBodycompHook)
	case boil.BeforeUpdateHook:
		tBodycompBeforeUpdateHooks = append(tBodycompBeforeUpdateHooks, tBodycompHook)
	case boil.AfterUpdateHook:
		tBodycompAfterUpdateHooks = append(tBodycompAfterUpdateHooks, tBodycompHook)
	case boil.BeforeDeleteHook:
		tBodycompBeforeDeleteHooks = append(tBodycompBeforeDeleteHooks, tBodycompHook)
	case boil.AfterDeleteHook:
		tBodycompAfterDeleteHooks = append(tBodycompAfterDeleteHooks, tBodycompHook)
	case boil.BeforeUpsertHook:
		tBodycompBeforeUpsertHooks = append(tBodycompBeforeUpsertHooks, tBodycompHook)
	case boil.AfterUpsertHook:
		tBodycompAfterUpsertHooks = append(tBodycompAfterUpsertHooks, tBodycompHook)
	}
}

// One returns a single tBodycomp record from the query.
func (q tBodycompQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TBodycomp, error) {
	o := &TBodycomp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for t_bodycomp")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TBodycomp records from the query.
func (q tBodycompQuery) All(ctx context.Context, exec boil.ContextExecutor) (TBodycompSlice, error) {
	var o []*TBodycomp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TBodycomp slice")
	}

	if len(tBodycompAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TBodycomp records in the query.
func (q tBodycompQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count t_bodycomp rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tBodycompQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if t_bodycomp exists")
	}

	return count > 0, nil
}

// TBodycomps retrieves all the records using an executor.
func TBodycomps(mods ...qm.QueryMod) tBodycompQuery {
	mods = append(mods, qm.From("\"muscle_tracking_go\".\"t_bodycomp\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"muscle_tracking_go\".\"t_bodycomp\".*"})
	}

	return tBodycompQuery{q}
}

// FindTBodycomp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTBodycomp(ctx context.Context, exec boil.ContextExecutor, userid string, trainingdate string, selectCols ...string) (*TBodycomp, error) {
	tBodycompObj := &TBodycomp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"muscle_tracking_go\".\"t_bodycomp\" where \"userid\"=$1 AND \"trainingdate\"=$2", sel,
	)

	q := queries.Raw(query, userid, trainingdate)

	err := q.Bind(ctx, exec, tBodycompObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from t_bodycomp")
	}

	if err = tBodycompObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tBodycompObj, err
	}

	return tBodycompObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TBodycomp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no t_bodycomp provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tBodycompColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tBodycompInsertCacheMut.RLock()
	cache, cached := tBodycompInsertCache[key]
	tBodycompInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tBodycompAllColumns,
			tBodycompColumnsWithDefault,
			tBodycompColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tBodycompType, tBodycompMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tBodycompType, tBodycompMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"muscle_tracking_go\".\"t_bodycomp\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"muscle_tracking_go\".\"t_bodycomp\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into t_bodycomp")
	}

	if !cached {
		tBodycompInsertCacheMut.Lock()
		tBodycompInsertCache[key] = cache
		tBodycompInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TBodycomp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TBodycomp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tBodycompUpdateCacheMut.RLock()
	cache, cached := tBodycompUpdateCache[key]
	tBodycompUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tBodycompAllColumns,
			tBodycompPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update t_bodycomp, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"t_bodycomp\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tBodycompPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tBodycompType, tBodycompMapping, append(wl, tBodycompPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update t_bodycomp row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for t_bodycomp")
	}

	if !cached {
		tBodycompUpdateCacheMut.Lock()
		tBodycompUpdateCache[key] = cache
		tBodycompUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tBodycompQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for t_bodycomp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for t_bodycomp")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TBodycompSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tBodycompPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"t_bodycomp\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tBodycompPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in tBodycomp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all tBodycomp")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TBodycomp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no t_bodycomp provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tBodycompColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tBodycompUpsertCacheMut.RLock()
	cache, cached := tBodycompUpsertCache[key]
	tBodycompUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tBodycompAllColumns,
			tBodycompColumnsWithDefault,
			tBodycompColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tBodycompAllColumns,
			tBodycompPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert t_bodycomp, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tBodycompPrimaryKeyColumns))
			copy(conflict, tBodycompPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"muscle_tracking_go\".\"t_bodycomp\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tBodycompType, tBodycompMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tBodycompType, tBodycompMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert t_bodycomp")
	}

	if !cached {
		tBodycompUpsertCacheMut.Lock()
		tBodycompUpsertCache[key] = cache
		tBodycompUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TBodycomp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TBodycomp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TBodycomp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tBodycompPrimaryKeyMapping)
	sql := "DELETE FROM \"muscle_tracking_go\".\"t_bodycomp\" WHERE \"userid\"=$1 AND \"trainingdate\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from t_bodycomp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for t_bodycomp")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tBodycompQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no tBodycompQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from t_bodycomp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for t_bodycomp")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TBodycompSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tBodycompBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tBodycompPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"muscle_tracking_go\".\"t_bodycomp\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tBodycompPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from tBodycomp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for t_bodycomp")
	}

	if len(tBodycompAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TBodycomp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTBodycomp(ctx, exec, o.Userid, o.Trainingdate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TBodycompSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TBodycompSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tBodycompPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"muscle_tracking_go\".\"t_bodycomp\".* FROM \"muscle_tracking_go\".\"t_bodycomp\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tBodycompPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TBodycompSlice")
	}

	*o = slice

	return nil
}

// TBodycompExists checks if the TBodycomp row exists.
func TBodycompExists(ctx context.Context, exec boil.ContextExecutor, userid string, trainingdate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"muscle_tracking_go\".\"t_bodycomp\" where \"userid\"=$1 AND \"trainingdate\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userid, trainingdate)
	}
	row := exec.QueryRowContext(ctx, sql, userid, trainingdate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if t_bodycomp exists")
	}

	return exists, nil
}
