// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTraininglog is an object representing the database table.
type TTraininglog struct {
	Logid          int         `boil:"logid" json:"logid" toml:"logid" yaml:"logid"`
	Menuid         int         `boil:"menuid" json:"menuid" toml:"menuid" yaml:"menuid"`
	Trainingweight float64     `boil:"trainingweight" json:"trainingweight" toml:"trainingweight" yaml:"trainingweight"`
	Trainingcount  int         `boil:"trainingcount" json:"trainingcount" toml:"trainingcount" yaml:"trainingcount"`
	Trainingdate   string      `boil:"trainingdate" json:"trainingdate" toml:"trainingdate" yaml:"trainingdate"`
	Trainingmemo   string      `boil:"trainingmemo" json:"trainingmemo" toml:"trainingmemo" yaml:"trainingmemo"`
	Userid         string      `boil:"userid" json:"userid" toml:"userid" yaml:"userid"`
	Regid          null.String `boil:"regid" json:"regid,omitempty" toml:"regid" yaml:"regid,omitempty"`
	Regdate        null.Time   `boil:"regdate" json:"regdate,omitempty" toml:"regdate" yaml:"regdate,omitempty"`
	Updid          null.String `boil:"updid" json:"updid,omitempty" toml:"updid" yaml:"updid,omitempty"`
	Upddate        null.Time   `boil:"upddate" json:"upddate,omitempty" toml:"upddate" yaml:"upddate,omitempty"`
	Version        int         `boil:"version" json:"version" toml:"version" yaml:"version"`

	R *tTraininglogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tTraininglogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTraininglogColumns = struct {
	Logid          string
	Menuid         string
	Trainingweight string
	Trainingcount  string
	Trainingdate   string
	Trainingmemo   string
	Userid         string
	Regid          string
	Regdate        string
	Updid          string
	Upddate        string
	Version        string
}{
	Logid:          "logid",
	Menuid:         "menuid",
	Trainingweight: "trainingweight",
	Trainingcount:  "trainingcount",
	Trainingdate:   "trainingdate",
	Trainingmemo:   "trainingmemo",
	Userid:         "userid",
	Regid:          "regid",
	Regdate:        "regdate",
	Updid:          "updid",
	Upddate:        "upddate",
	Version:        "version",
}

var TTraininglogTableColumns = struct {
	Logid          string
	Menuid         string
	Trainingweight string
	Trainingcount  string
	Trainingdate   string
	Trainingmemo   string
	Userid         string
	Regid          string
	Regdate        string
	Updid          string
	Upddate        string
	Version        string
}{
	Logid:          "t_traininglog.logid",
	Menuid:         "t_traininglog.menuid",
	Trainingweight: "t_traininglog.trainingweight",
	Trainingcount:  "t_traininglog.trainingcount",
	Trainingdate:   "t_traininglog.trainingdate",
	Trainingmemo:   "t_traininglog.trainingmemo",
	Userid:         "t_traininglog.userid",
	Regid:          "t_traininglog.regid",
	Regdate:        "t_traininglog.regdate",
	Updid:          "t_traininglog.updid",
	Upddate:        "t_traininglog.upddate",
	Version:        "t_traininglog.version",
}

// Generated where

var TTraininglogWhere = struct {
	Logid          whereHelperint
	Menuid         whereHelperint
	Trainingweight whereHelperfloat64
	Trainingcount  whereHelperint
	Trainingdate   whereHelperstring
	Trainingmemo   whereHelperstring
	Userid         whereHelperstring
	Regid          whereHelpernull_String
	Regdate        whereHelpernull_Time
	Updid          whereHelpernull_String
	Upddate        whereHelpernull_Time
	Version        whereHelperint
}{
	Logid:          whereHelperint{field: "\"muscle_tracking_go\".\"t_traininglog\".\"logid\""},
	Menuid:         whereHelperint{field: "\"muscle_tracking_go\".\"t_traininglog\".\"menuid\""},
	Trainingweight: whereHelperfloat64{field: "\"muscle_tracking_go\".\"t_traininglog\".\"trainingweight\""},
	Trainingcount:  whereHelperint{field: "\"muscle_tracking_go\".\"t_traininglog\".\"trainingcount\""},
	Trainingdate:   whereHelperstring{field: "\"muscle_tracking_go\".\"t_traininglog\".\"trainingdate\""},
	Trainingmemo:   whereHelperstring{field: "\"muscle_tracking_go\".\"t_traininglog\".\"trainingmemo\""},
	Userid:         whereHelperstring{field: "\"muscle_tracking_go\".\"t_traininglog\".\"userid\""},
	Regid:          whereHelpernull_String{field: "\"muscle_tracking_go\".\"t_traininglog\".\"regid\""},
	Regdate:        whereHelpernull_Time{field: "\"muscle_tracking_go\".\"t_traininglog\".\"regdate\""},
	Updid:          whereHelpernull_String{field: "\"muscle_tracking_go\".\"t_traininglog\".\"updid\""},
	Upddate:        whereHelpernull_Time{field: "\"muscle_tracking_go\".\"t_traininglog\".\"upddate\""},
	Version:        whereHelperint{field: "\"muscle_tracking_go\".\"t_traininglog\".\"version\""},
}

// TTraininglogRels is where relationship names are stored.
var TTraininglogRels = struct {
	MenuidMMenu string
	UseridMUser string
}{
	MenuidMMenu: "MenuidMMenu",
	UseridMUser: "UseridMUser",
}

// tTraininglogR is where relationships are stored.
type tTraininglogR struct {
	MenuidMMenu *MMenu `boil:"MenuidMMenu" json:"MenuidMMenu" toml:"MenuidMMenu" yaml:"MenuidMMenu"`
	UseridMUser *MUser `boil:"UseridMUser" json:"UseridMUser" toml:"UseridMUser" yaml:"UseridMUser"`
}

// NewStruct creates a new relationship struct
func (*tTraininglogR) NewStruct() *tTraininglogR {
	return &tTraininglogR{}
}

func (r *tTraininglogR) GetMenuidMMenu() *MMenu {
	if r == nil {
		return nil
	}
	return r.MenuidMMenu
}

func (r *tTraininglogR) GetUseridMUser() *MUser {
	if r == nil {
		return nil
	}
	return r.UseridMUser
}

// tTraininglogL is where Load methods for each relationship are stored.
type tTraininglogL struct{}

var (
	tTraininglogAllColumns            = []string{"logid", "menuid", "trainingweight", "trainingcount", "trainingdate", "trainingmemo", "userid", "regid", "regdate", "updid", "upddate", "version"}
	tTraininglogColumnsWithoutDefault = []string{"menuid", "trainingweight", "trainingcount", "trainingdate", "trainingmemo", "userid", "version"}
	tTraininglogColumnsWithDefault    = []string{"logid", "regid", "regdate", "updid", "upddate"}
	tTraininglogPrimaryKeyColumns     = []string{"logid"}
	tTraininglogGeneratedColumns      = []string{}
)

type (
	// TTraininglogSlice is an alias for a slice of pointers to TTraininglog.
	// This should almost always be used instead of []TTraininglog.
	TTraininglogSlice []*TTraininglog
	// TTraininglogHook is the signature for custom TTraininglog hook methods
	TTraininglogHook func(context.Context, boil.ContextExecutor, *TTraininglog) error

	tTraininglogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tTraininglogType                 = reflect.TypeOf(&TTraininglog{})
	tTraininglogMapping              = queries.MakeStructMapping(tTraininglogType)
	tTraininglogPrimaryKeyMapping, _ = queries.BindMapping(tTraininglogType, tTraininglogMapping, tTraininglogPrimaryKeyColumns)
	tTraininglogInsertCacheMut       sync.RWMutex
	tTraininglogInsertCache          = make(map[string]insertCache)
	tTraininglogUpdateCacheMut       sync.RWMutex
	tTraininglogUpdateCache          = make(map[string]updateCache)
	tTraininglogUpsertCacheMut       sync.RWMutex
	tTraininglogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tTraininglogAfterSelectHooks []TTraininglogHook

var tTraininglogBeforeInsertHooks []TTraininglogHook
var tTraininglogAfterInsertHooks []TTraininglogHook

var tTraininglogBeforeUpdateHooks []TTraininglogHook
var tTraininglogAfterUpdateHooks []TTraininglogHook

var tTraininglogBeforeDeleteHooks []TTraininglogHook
var tTraininglogAfterDeleteHooks []TTraininglogHook

var tTraininglogBeforeUpsertHooks []TTraininglogHook
var tTraininglogAfterUpsertHooks []TTraininglogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTraininglog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTraininglogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTraininglog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTraininglogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTraininglog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTraininglogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTraininglog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTraininglogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTraininglog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTraininglogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTraininglog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTraininglogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTraininglog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTraininglogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTraininglog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTraininglogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTraininglog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTraininglogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTraininglogHook registers your hook function for all future operations.
func AddTTraininglogHook(hookPoint boil.HookPoint, tTraininglogHook TTraininglogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tTraininglogAfterSelectHooks = append(tTraininglogAfterSelectHooks, tTraininglogHook)
	case boil.BeforeInsertHook:
		tTraininglogBeforeInsertHooks = append(tTraininglogBeforeInsertHooks, tTraininglogHook)
	case boil.AfterInsertHook:
		tTraininglogAfterInsertHooks = append(tTraininglogAfterInsertHooks, tTraininglogHook)
	case boil.BeforeUpdateHook:
		tTraininglogBeforeUpdateHooks = append(tTraininglogBeforeUpdateHooks, tTraininglogHook)
	case boil.AfterUpdateHook:
		tTraininglogAfterUpdateHooks = append(tTraininglogAfterUpdateHooks, tTraininglogHook)
	case boil.BeforeDeleteHook:
		tTraininglogBeforeDeleteHooks = append(tTraininglogBeforeDeleteHooks, tTraininglogHook)
	case boil.AfterDeleteHook:
		tTraininglogAfterDeleteHooks = append(tTraininglogAfterDeleteHooks, tTraininglogHook)
	case boil.BeforeUpsertHook:
		tTraininglogBeforeUpsertHooks = append(tTraininglogBeforeUpsertHooks, tTraininglogHook)
	case boil.AfterUpsertHook:
		tTraininglogAfterUpsertHooks = append(tTraininglogAfterUpsertHooks, tTraininglogHook)
	}
}

// One returns a single tTraininglog record from the query.
func (q tTraininglogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTraininglog, error) {
	o := &TTraininglog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for t_traininglog")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TTraininglog records from the query.
func (q tTraininglogQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTraininglogSlice, error) {
	var o []*TTraininglog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TTraininglog slice")
	}

	if len(tTraininglogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TTraininglog records in the query.
func (q tTraininglogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count t_traininglog rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tTraininglogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if t_traininglog exists")
	}

	return count > 0, nil
}

// MenuidMMenu pointed to by the foreign key.
func (o *TTraininglog) MenuidMMenu(mods ...qm.QueryMod) mMenuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"menuid\" = ?", o.Menuid),
	}

	queryMods = append(queryMods, mods...)

	return MMenus(queryMods...)
}

// UseridMUser pointed to by the foreign key.
func (o *TTraininglog) UseridMUser(mods ...qm.QueryMod) mUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.Userid),
	}

	queryMods = append(queryMods, mods...)

	return MUsers(queryMods...)
}

// LoadMenuidMMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tTraininglogL) LoadMenuidMMenu(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTTraininglog interface{}, mods queries.Applicator) error {
	var slice []*TTraininglog
	var object *TTraininglog

	if singular {
		var ok bool
		object, ok = maybeTTraininglog.(*TTraininglog)
		if !ok {
			object = new(TTraininglog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTTraininglog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTTraininglog))
			}
		}
	} else {
		s, ok := maybeTTraininglog.(*[]*TTraininglog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTTraininglog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTTraininglog))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tTraininglogR{}
		}
		args = append(args, object.Menuid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tTraininglogR{}
			}

			for _, a := range args {
				if a == obj.Menuid {
					continue Outer
				}
			}

			args = append(args, obj.Menuid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`muscle_tracking_go.m_menu`),
		qm.WhereIn(`muscle_tracking_go.m_menu.menuid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MMenu")
	}

	var resultSlice []*MMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MMenu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for m_menu")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for m_menu")
	}

	if len(tTraininglogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MenuidMMenu = foreign
		if foreign.R == nil {
			foreign.R = &mMenuR{}
		}
		foreign.R.MenuidTTraininglogs = append(foreign.R.MenuidTTraininglogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Menuid == foreign.Menuid {
				local.R.MenuidMMenu = foreign
				if foreign.R == nil {
					foreign.R = &mMenuR{}
				}
				foreign.R.MenuidTTraininglogs = append(foreign.R.MenuidTTraininglogs, local)
				break
			}
		}
	}

	return nil
}

// LoadUseridMUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tTraininglogL) LoadUseridMUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTTraininglog interface{}, mods queries.Applicator) error {
	var slice []*TTraininglog
	var object *TTraininglog

	if singular {
		var ok bool
		object, ok = maybeTTraininglog.(*TTraininglog)
		if !ok {
			object = new(TTraininglog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTTraininglog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTTraininglog))
			}
		}
	} else {
		s, ok := maybeTTraininglog.(*[]*TTraininglog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTTraininglog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTTraininglog))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tTraininglogR{}
		}
		args = append(args, object.Userid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tTraininglogR{}
			}

			for _, a := range args {
				if a == obj.Userid {
					continue Outer
				}
			}

			args = append(args, obj.Userid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`muscle_tracking_go.m_user`),
		qm.WhereIn(`muscle_tracking_go.m_user.userid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MUser")
	}

	var resultSlice []*MUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for m_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for m_user")
	}

	if len(tTraininglogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridMUser = foreign
		if foreign.R == nil {
			foreign.R = &mUserR{}
		}
		foreign.R.UseridTTraininglogs = append(foreign.R.UseridTTraininglogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Userid == foreign.Userid {
				local.R.UseridMUser = foreign
				if foreign.R == nil {
					foreign.R = &mUserR{}
				}
				foreign.R.UseridTTraininglogs = append(foreign.R.UseridTTraininglogs, local)
				break
			}
		}
	}

	return nil
}

// SetMenuidMMenu of the tTraininglog to the related item.
// Sets o.R.MenuidMMenu to related.
// Adds o to related.R.MenuidTTraininglogs.
func (o *TTraininglog) SetMenuidMMenu(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MMenu) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"muscle_tracking_go\".\"t_traininglog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"menuid"}),
		strmangle.WhereClause("\"", "\"", 2, tTraininglogPrimaryKeyColumns),
	)
	values := []interface{}{related.Menuid, o.Logid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Menuid = related.Menuid
	if o.R == nil {
		o.R = &tTraininglogR{
			MenuidMMenu: related,
		}
	} else {
		o.R.MenuidMMenu = related
	}

	if related.R == nil {
		related.R = &mMenuR{
			MenuidTTraininglogs: TTraininglogSlice{o},
		}
	} else {
		related.R.MenuidTTraininglogs = append(related.R.MenuidTTraininglogs, o)
	}

	return nil
}

// SetUseridMUser of the tTraininglog to the related item.
// Sets o.R.UseridMUser to related.
// Adds o to related.R.UseridTTraininglogs.
func (o *TTraininglog) SetUseridMUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"muscle_tracking_go\".\"t_traininglog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
		strmangle.WhereClause("\"", "\"", 2, tTraininglogPrimaryKeyColumns),
	)
	values := []interface{}{related.Userid, o.Logid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Userid = related.Userid
	if o.R == nil {
		o.R = &tTraininglogR{
			UseridMUser: related,
		}
	} else {
		o.R.UseridMUser = related
	}

	if related.R == nil {
		related.R = &mUserR{
			UseridTTraininglogs: TTraininglogSlice{o},
		}
	} else {
		related.R.UseridTTraininglogs = append(related.R.UseridTTraininglogs, o)
	}

	return nil
}

// TTraininglogs retrieves all the records using an executor.
func TTraininglogs(mods ...qm.QueryMod) tTraininglogQuery {
	mods = append(mods, qm.From("\"muscle_tracking_go\".\"t_traininglog\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"muscle_tracking_go\".\"t_traininglog\".*"})
	}

	return tTraininglogQuery{q}
}

// FindTTraininglog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTraininglog(ctx context.Context, exec boil.ContextExecutor, logid int, selectCols ...string) (*TTraininglog, error) {
	tTraininglogObj := &TTraininglog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"muscle_tracking_go\".\"t_traininglog\" where \"logid\"=$1", sel,
	)

	q := queries.Raw(query, logid)

	err := q.Bind(ctx, exec, tTraininglogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from t_traininglog")
	}

	if err = tTraininglogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tTraininglogObj, err
	}

	return tTraininglogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTraininglog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no t_traininglog provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tTraininglogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tTraininglogInsertCacheMut.RLock()
	cache, cached := tTraininglogInsertCache[key]
	tTraininglogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tTraininglogAllColumns,
			tTraininglogColumnsWithDefault,
			tTraininglogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tTraininglogType, tTraininglogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tTraininglogType, tTraininglogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"muscle_tracking_go\".\"t_traininglog\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"muscle_tracking_go\".\"t_traininglog\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into t_traininglog")
	}

	if !cached {
		tTraininglogInsertCacheMut.Lock()
		tTraininglogInsertCache[key] = cache
		tTraininglogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TTraininglog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTraininglog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tTraininglogUpdateCacheMut.RLock()
	cache, cached := tTraininglogUpdateCache[key]
	tTraininglogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tTraininglogAllColumns,
			tTraininglogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update t_traininglog, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"t_traininglog\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tTraininglogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tTraininglogType, tTraininglogMapping, append(wl, tTraininglogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update t_traininglog row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for t_traininglog")
	}

	if !cached {
		tTraininglogUpdateCacheMut.Lock()
		tTraininglogUpdateCache[key] = cache
		tTraininglogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tTraininglogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for t_traininglog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for t_traininglog")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTraininglogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tTraininglogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"t_traininglog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tTraininglogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in tTraininglog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all tTraininglog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TTraininglog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no t_traininglog provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tTraininglogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tTraininglogUpsertCacheMut.RLock()
	cache, cached := tTraininglogUpsertCache[key]
	tTraininglogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tTraininglogAllColumns,
			tTraininglogColumnsWithDefault,
			tTraininglogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tTraininglogAllColumns,
			tTraininglogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert t_traininglog, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tTraininglogPrimaryKeyColumns))
			copy(conflict, tTraininglogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"muscle_tracking_go\".\"t_traininglog\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tTraininglogType, tTraininglogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tTraininglogType, tTraininglogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert t_traininglog")
	}

	if !cached {
		tTraininglogUpsertCacheMut.Lock()
		tTraininglogUpsertCache[key] = cache
		tTraininglogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TTraininglog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTraininglog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TTraininglog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tTraininglogPrimaryKeyMapping)
	sql := "DELETE FROM \"muscle_tracking_go\".\"t_traininglog\" WHERE \"logid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from t_traininglog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for t_traininglog")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tTraininglogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no tTraininglogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from t_traininglog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for t_traininglog")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTraininglogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tTraininglogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tTraininglogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"muscle_tracking_go\".\"t_traininglog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tTraininglogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from tTraininglog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for t_traininglog")
	}

	if len(tTraininglogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTraininglog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTraininglog(ctx, exec, o.Logid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTraininglogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTraininglogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tTraininglogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"muscle_tracking_go\".\"t_traininglog\".* FROM \"muscle_tracking_go\".\"t_traininglog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tTraininglogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TTraininglogSlice")
	}

	*o = slice

	return nil
}

// TTraininglogExists checks if the TTraininglog row exists.
func TTraininglogExists(ctx context.Context, exec boil.ContextExecutor, logid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"muscle_tracking_go\".\"t_traininglog\" where \"logid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, logid)
	}
	row := exec.QueryRowContext(ctx, sql, logid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if t_traininglog exists")
	}

	return exists, nil
}
