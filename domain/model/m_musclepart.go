// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MMusclepart is an object representing the database table.
type MMusclepart struct {
	Musclepartid   string      `boil:"musclepartid" json:"musclepartid" toml:"musclepartid" yaml:"musclepartid"`
	Musclepartname string      `boil:"musclepartname" json:"musclepartname" toml:"musclepartname" yaml:"musclepartname"`
	Regid          null.String `boil:"regid" json:"regid,omitempty" toml:"regid" yaml:"regid,omitempty"`
	Regdate        null.Time   `boil:"regdate" json:"regdate,omitempty" toml:"regdate" yaml:"regdate,omitempty"`
	Updid          null.String `boil:"updid" json:"updid,omitempty" toml:"updid" yaml:"updid,omitempty"`
	Upddate        null.Time   `boil:"upddate" json:"upddate,omitempty" toml:"upddate" yaml:"upddate,omitempty"`
	Version        int         `boil:"version" json:"version" toml:"version" yaml:"version"`

	R *mMusclepartR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mMusclepartL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MMusclepartColumns = struct {
	Musclepartid   string
	Musclepartname string
	Regid          string
	Regdate        string
	Updid          string
	Upddate        string
	Version        string
}{
	Musclepartid:   "musclepartid",
	Musclepartname: "musclepartname",
	Regid:          "regid",
	Regdate:        "regdate",
	Updid:          "updid",
	Upddate:        "upddate",
	Version:        "version",
}

var MMusclepartTableColumns = struct {
	Musclepartid   string
	Musclepartname string
	Regid          string
	Regdate        string
	Updid          string
	Upddate        string
	Version        string
}{
	Musclepartid:   "m_musclepart.musclepartid",
	Musclepartname: "m_musclepart.musclepartname",
	Regid:          "m_musclepart.regid",
	Regdate:        "m_musclepart.regdate",
	Updid:          "m_musclepart.updid",
	Upddate:        "m_musclepart.upddate",
	Version:        "m_musclepart.version",
}

// Generated where

var MMusclepartWhere = struct {
	Musclepartid   whereHelperstring
	Musclepartname whereHelperstring
	Regid          whereHelpernull_String
	Regdate        whereHelpernull_Time
	Updid          whereHelpernull_String
	Upddate        whereHelpernull_Time
	Version        whereHelperint
}{
	Musclepartid:   whereHelperstring{field: "\"muscle_tracking_go\".\"m_musclepart\".\"musclepartid\""},
	Musclepartname: whereHelperstring{field: "\"muscle_tracking_go\".\"m_musclepart\".\"musclepartname\""},
	Regid:          whereHelpernull_String{field: "\"muscle_tracking_go\".\"m_musclepart\".\"regid\""},
	Regdate:        whereHelpernull_Time{field: "\"muscle_tracking_go\".\"m_musclepart\".\"regdate\""},
	Updid:          whereHelpernull_String{field: "\"muscle_tracking_go\".\"m_musclepart\".\"updid\""},
	Upddate:        whereHelpernull_Time{field: "\"muscle_tracking_go\".\"m_musclepart\".\"upddate\""},
	Version:        whereHelperint{field: "\"muscle_tracking_go\".\"m_musclepart\".\"version\""},
}

// MMusclepartRels is where relationship names are stored.
var MMusclepartRels = struct {
	MusclepartidMMenus string
}{
	MusclepartidMMenus: "MusclepartidMMenus",
}

// mMusclepartR is where relationships are stored.
type mMusclepartR struct {
	MusclepartidMMenus MMenuSlice `boil:"MusclepartidMMenus" json:"MusclepartidMMenus" toml:"MusclepartidMMenus" yaml:"MusclepartidMMenus"`
}

// NewStruct creates a new relationship struct
func (*mMusclepartR) NewStruct() *mMusclepartR {
	return &mMusclepartR{}
}

func (r *mMusclepartR) GetMusclepartidMMenus() MMenuSlice {
	if r == nil {
		return nil
	}
	return r.MusclepartidMMenus
}

// mMusclepartL is where Load methods for each relationship are stored.
type mMusclepartL struct{}

var (
	mMusclepartAllColumns            = []string{"musclepartid", "musclepartname", "regid", "regdate", "updid", "upddate", "version"}
	mMusclepartColumnsWithoutDefault = []string{"musclepartid", "musclepartname", "version"}
	mMusclepartColumnsWithDefault    = []string{"regid", "regdate", "updid", "upddate"}
	mMusclepartPrimaryKeyColumns     = []string{"musclepartid"}
	mMusclepartGeneratedColumns      = []string{}
)

type (
	// MMusclepartSlice is an alias for a slice of pointers to MMusclepart.
	// This should almost always be used instead of []MMusclepart.
	MMusclepartSlice []*MMusclepart
	// MMusclepartHook is the signature for custom MMusclepart hook methods
	MMusclepartHook func(context.Context, boil.ContextExecutor, *MMusclepart) error

	mMusclepartQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mMusclepartType                 = reflect.TypeOf(&MMusclepart{})
	mMusclepartMapping              = queries.MakeStructMapping(mMusclepartType)
	mMusclepartPrimaryKeyMapping, _ = queries.BindMapping(mMusclepartType, mMusclepartMapping, mMusclepartPrimaryKeyColumns)
	mMusclepartInsertCacheMut       sync.RWMutex
	mMusclepartInsertCache          = make(map[string]insertCache)
	mMusclepartUpdateCacheMut       sync.RWMutex
	mMusclepartUpdateCache          = make(map[string]updateCache)
	mMusclepartUpsertCacheMut       sync.RWMutex
	mMusclepartUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mMusclepartAfterSelectHooks []MMusclepartHook

var mMusclepartBeforeInsertHooks []MMusclepartHook
var mMusclepartAfterInsertHooks []MMusclepartHook

var mMusclepartBeforeUpdateHooks []MMusclepartHook
var mMusclepartAfterUpdateHooks []MMusclepartHook

var mMusclepartBeforeDeleteHooks []MMusclepartHook
var mMusclepartAfterDeleteHooks []MMusclepartHook

var mMusclepartBeforeUpsertHooks []MMusclepartHook
var mMusclepartAfterUpsertHooks []MMusclepartHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MMusclepart) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMusclepartAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MMusclepart) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMusclepartBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MMusclepart) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMusclepartAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MMusclepart) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMusclepartBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MMusclepart) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMusclepartAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MMusclepart) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMusclepartBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MMusclepart) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMusclepartAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MMusclepart) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMusclepartBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MMusclepart) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMusclepartAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMMusclepartHook registers your hook function for all future operations.
func AddMMusclepartHook(hookPoint boil.HookPoint, mMusclepartHook MMusclepartHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mMusclepartAfterSelectHooks = append(mMusclepartAfterSelectHooks, mMusclepartHook)
	case boil.BeforeInsertHook:
		mMusclepartBeforeInsertHooks = append(mMusclepartBeforeInsertHooks, mMusclepartHook)
	case boil.AfterInsertHook:
		mMusclepartAfterInsertHooks = append(mMusclepartAfterInsertHooks, mMusclepartHook)
	case boil.BeforeUpdateHook:
		mMusclepartBeforeUpdateHooks = append(mMusclepartBeforeUpdateHooks, mMusclepartHook)
	case boil.AfterUpdateHook:
		mMusclepartAfterUpdateHooks = append(mMusclepartAfterUpdateHooks, mMusclepartHook)
	case boil.BeforeDeleteHook:
		mMusclepartBeforeDeleteHooks = append(mMusclepartBeforeDeleteHooks, mMusclepartHook)
	case boil.AfterDeleteHook:
		mMusclepartAfterDeleteHooks = append(mMusclepartAfterDeleteHooks, mMusclepartHook)
	case boil.BeforeUpsertHook:
		mMusclepartBeforeUpsertHooks = append(mMusclepartBeforeUpsertHooks, mMusclepartHook)
	case boil.AfterUpsertHook:
		mMusclepartAfterUpsertHooks = append(mMusclepartAfterUpsertHooks, mMusclepartHook)
	}
}

// One returns a single mMusclepart record from the query.
func (q mMusclepartQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MMusclepart, error) {
	o := &MMusclepart{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for m_musclepart")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MMusclepart records from the query.
func (q mMusclepartQuery) All(ctx context.Context, exec boil.ContextExecutor) (MMusclepartSlice, error) {
	var o []*MMusclepart

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MMusclepart slice")
	}

	if len(mMusclepartAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MMusclepart records in the query.
func (q mMusclepartQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count m_musclepart rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mMusclepartQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if m_musclepart exists")
	}

	return count > 0, nil
}

// MusclepartidMMenus retrieves all the m_menu's MMenus with an executor via musclepartid column.
func (o *MMusclepart) MusclepartidMMenus(mods ...qm.QueryMod) mMenuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"muscle_tracking_go\".\"m_menu\".\"musclepartid\"=?", o.Musclepartid),
	)

	return MMenus(queryMods...)
}

// LoadMusclepartidMMenus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mMusclepartL) LoadMusclepartidMMenus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMMusclepart interface{}, mods queries.Applicator) error {
	var slice []*MMusclepart
	var object *MMusclepart

	if singular {
		var ok bool
		object, ok = maybeMMusclepart.(*MMusclepart)
		if !ok {
			object = new(MMusclepart)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMMusclepart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMMusclepart))
			}
		}
	} else {
		s, ok := maybeMMusclepart.(*[]*MMusclepart)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMMusclepart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMMusclepart))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mMusclepartR{}
		}
		args = append(args, object.Musclepartid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mMusclepartR{}
			}

			for _, a := range args {
				if a == obj.Musclepartid {
					continue Outer
				}
			}

			args = append(args, obj.Musclepartid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`muscle_tracking_go.m_menu`),
		qm.WhereIn(`muscle_tracking_go.m_menu.musclepartid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load m_menu")
	}

	var resultSlice []*MMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice m_menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on m_menu")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for m_menu")
	}

	if len(mMenuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MusclepartidMMenus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mMenuR{}
			}
			foreign.R.MusclepartidMMusclepart = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Musclepartid == foreign.Musclepartid {
				local.R.MusclepartidMMenus = append(local.R.MusclepartidMMenus, foreign)
				if foreign.R == nil {
					foreign.R = &mMenuR{}
				}
				foreign.R.MusclepartidMMusclepart = local
				break
			}
		}
	}

	return nil
}

// AddMusclepartidMMenus adds the given related objects to the existing relationships
// of the m_musclepart, optionally inserting them as new records.
// Appends related to o.R.MusclepartidMMenus.
// Sets related.R.MusclepartidMMusclepart appropriately.
func (o *MMusclepart) AddMusclepartidMMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MMenu) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Musclepartid = o.Musclepartid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"muscle_tracking_go\".\"m_menu\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"musclepartid"}),
				strmangle.WhereClause("\"", "\"", 2, mMenuPrimaryKeyColumns),
			)
			values := []interface{}{o.Musclepartid, rel.Menuid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Musclepartid = o.Musclepartid
		}
	}

	if o.R == nil {
		o.R = &mMusclepartR{
			MusclepartidMMenus: related,
		}
	} else {
		o.R.MusclepartidMMenus = append(o.R.MusclepartidMMenus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mMenuR{
				MusclepartidMMusclepart: o,
			}
		} else {
			rel.R.MusclepartidMMusclepart = o
		}
	}
	return nil
}

// MMuscleparts retrieves all the records using an executor.
func MMuscleparts(mods ...qm.QueryMod) mMusclepartQuery {
	mods = append(mods, qm.From("\"muscle_tracking_go\".\"m_musclepart\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"muscle_tracking_go\".\"m_musclepart\".*"})
	}

	return mMusclepartQuery{q}
}

// FindMMusclepart retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMMusclepart(ctx context.Context, exec boil.ContextExecutor, musclepartid string, selectCols ...string) (*MMusclepart, error) {
	mMusclepartObj := &MMusclepart{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"muscle_tracking_go\".\"m_musclepart\" where \"musclepartid\"=$1", sel,
	)

	q := queries.Raw(query, musclepartid)

	err := q.Bind(ctx, exec, mMusclepartObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from m_musclepart")
	}

	if err = mMusclepartObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mMusclepartObj, err
	}

	return mMusclepartObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MMusclepart) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no m_musclepart provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mMusclepartColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mMusclepartInsertCacheMut.RLock()
	cache, cached := mMusclepartInsertCache[key]
	mMusclepartInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mMusclepartAllColumns,
			mMusclepartColumnsWithDefault,
			mMusclepartColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mMusclepartType, mMusclepartMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mMusclepartType, mMusclepartMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"muscle_tracking_go\".\"m_musclepart\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"muscle_tracking_go\".\"m_musclepart\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into m_musclepart")
	}

	if !cached {
		mMusclepartInsertCacheMut.Lock()
		mMusclepartInsertCache[key] = cache
		mMusclepartInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MMusclepart.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MMusclepart) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mMusclepartUpdateCacheMut.RLock()
	cache, cached := mMusclepartUpdateCache[key]
	mMusclepartUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mMusclepartAllColumns,
			mMusclepartPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update m_musclepart, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"m_musclepart\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mMusclepartPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mMusclepartType, mMusclepartMapping, append(wl, mMusclepartPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update m_musclepart row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for m_musclepart")
	}

	if !cached {
		mMusclepartUpdateCacheMut.Lock()
		mMusclepartUpdateCache[key] = cache
		mMusclepartUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mMusclepartQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for m_musclepart")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for m_musclepart")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MMusclepartSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mMusclepartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"m_musclepart\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mMusclepartPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in mMusclepart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all mMusclepart")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MMusclepart) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no m_musclepart provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mMusclepartColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mMusclepartUpsertCacheMut.RLock()
	cache, cached := mMusclepartUpsertCache[key]
	mMusclepartUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mMusclepartAllColumns,
			mMusclepartColumnsWithDefault,
			mMusclepartColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mMusclepartAllColumns,
			mMusclepartPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert m_musclepart, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mMusclepartPrimaryKeyColumns))
			copy(conflict, mMusclepartPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"muscle_tracking_go\".\"m_musclepart\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mMusclepartType, mMusclepartMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mMusclepartType, mMusclepartMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert m_musclepart")
	}

	if !cached {
		mMusclepartUpsertCacheMut.Lock()
		mMusclepartUpsertCache[key] = cache
		mMusclepartUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MMusclepart record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MMusclepart) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MMusclepart provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mMusclepartPrimaryKeyMapping)
	sql := "DELETE FROM \"muscle_tracking_go\".\"m_musclepart\" WHERE \"musclepartid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from m_musclepart")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for m_musclepart")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mMusclepartQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no mMusclepartQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from m_musclepart")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for m_musclepart")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MMusclepartSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mMusclepartBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mMusclepartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"muscle_tracking_go\".\"m_musclepart\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mMusclepartPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mMusclepart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for m_musclepart")
	}

	if len(mMusclepartAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MMusclepart) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMMusclepart(ctx, exec, o.Musclepartid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MMusclepartSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MMusclepartSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mMusclepartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"muscle_tracking_go\".\"m_musclepart\".* FROM \"muscle_tracking_go\".\"m_musclepart\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mMusclepartPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MMusclepartSlice")
	}

	*o = slice

	return nil
}

// MMusclepartExists checks if the MMusclepart row exists.
func MMusclepartExists(ctx context.Context, exec boil.ContextExecutor, musclepartid string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"muscle_tracking_go\".\"m_musclepart\" where \"musclepartid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, musclepartid)
	}
	row := exec.QueryRowContext(ctx, sql, musclepartid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if m_musclepart exists")
	}

	return exists, nil
}
