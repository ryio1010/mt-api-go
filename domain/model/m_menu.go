// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MMenu is an object representing the database table.
type MMenu struct {
	Menuid       int         `boil:"menuid" json:"menuid" toml:"menuid" yaml:"menuid"`
	Menuname     string      `boil:"menuname" json:"menuname" toml:"menuname" yaml:"menuname"`
	Musclepartid string      `boil:"musclepartid" json:"musclepartid" toml:"musclepartid" yaml:"musclepartid"`
	Userid       null.String `boil:"userid" json:"userid,omitempty" toml:"userid" yaml:"userid,omitempty"`
	// 0:デフォルト
	// 1:ユーザー追加
	Status  string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Regid   null.String `boil:"regid" json:"regid,omitempty" toml:"regid" yaml:"regid,omitempty"`
	Regdate null.Time   `boil:"regdate" json:"regdate,omitempty" toml:"regdate" yaml:"regdate,omitempty"`
	Updid   null.String `boil:"updid" json:"updid,omitempty" toml:"updid" yaml:"updid,omitempty"`
	Upddate null.Time   `boil:"upddate" json:"upddate,omitempty" toml:"upddate" yaml:"upddate,omitempty"`
	Version int         `boil:"version" json:"version" toml:"version" yaml:"version"`

	R *mMenuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mMenuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MMenuColumns = struct {
	Menuid       string
	Menuname     string
	Musclepartid string
	Userid       string
	Status       string
	Regid        string
	Regdate      string
	Updid        string
	Upddate      string
	Version      string
}{
	Menuid:       "menuid",
	Menuname:     "menuname",
	Musclepartid: "musclepartid",
	Userid:       "userid",
	Status:       "status",
	Regid:        "regid",
	Regdate:      "regdate",
	Updid:        "updid",
	Upddate:      "upddate",
	Version:      "version",
}

var MMenuTableColumns = struct {
	Menuid       string
	Menuname     string
	Musclepartid string
	Userid       string
	Status       string
	Regid        string
	Regdate      string
	Updid        string
	Upddate      string
	Version      string
}{
	Menuid:       "m_menu.menuid",
	Menuname:     "m_menu.menuname",
	Musclepartid: "m_menu.musclepartid",
	Userid:       "m_menu.userid",
	Status:       "m_menu.status",
	Regid:        "m_menu.regid",
	Regdate:      "m_menu.regdate",
	Updid:        "m_menu.updid",
	Upddate:      "m_menu.upddate",
	Version:      "m_menu.version",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MMenuWhere = struct {
	Menuid       whereHelperint
	Menuname     whereHelperstring
	Musclepartid whereHelperstring
	Userid       whereHelpernull_String
	Status       whereHelperstring
	Regid        whereHelpernull_String
	Regdate      whereHelpernull_Time
	Updid        whereHelpernull_String
	Upddate      whereHelpernull_Time
	Version      whereHelperint
}{
	Menuid:       whereHelperint{field: "\"muscle_tracking_go\".\"m_menu\".\"menuid\""},
	Menuname:     whereHelperstring{field: "\"muscle_tracking_go\".\"m_menu\".\"menuname\""},
	Musclepartid: whereHelperstring{field: "\"muscle_tracking_go\".\"m_menu\".\"musclepartid\""},
	Userid:       whereHelpernull_String{field: "\"muscle_tracking_go\".\"m_menu\".\"userid\""},
	Status:       whereHelperstring{field: "\"muscle_tracking_go\".\"m_menu\".\"status\""},
	Regid:        whereHelpernull_String{field: "\"muscle_tracking_go\".\"m_menu\".\"regid\""},
	Regdate:      whereHelpernull_Time{field: "\"muscle_tracking_go\".\"m_menu\".\"regdate\""},
	Updid:        whereHelpernull_String{field: "\"muscle_tracking_go\".\"m_menu\".\"updid\""},
	Upddate:      whereHelpernull_Time{field: "\"muscle_tracking_go\".\"m_menu\".\"upddate\""},
	Version:      whereHelperint{field: "\"muscle_tracking_go\".\"m_menu\".\"version\""},
}

// MMenuRels is where relationship names are stored.
var MMenuRels = struct {
	MusclepartidMMusclepart string
	UseridMUser             string
	MenuidTTraininglogs     string
}{
	MusclepartidMMusclepart: "MusclepartidMMusclepart",
	UseridMUser:             "UseridMUser",
	MenuidTTraininglogs:     "MenuidTTraininglogs",
}

// mMenuR is where relationships are stored.
type mMenuR struct {
	MusclepartidMMusclepart *MMusclepart      `boil:"MusclepartidMMusclepart" json:"MusclepartidMMusclepart" toml:"MusclepartidMMusclepart" yaml:"MusclepartidMMusclepart"`
	UseridMUser             *MUser            `boil:"UseridMUser" json:"UseridMUser" toml:"UseridMUser" yaml:"UseridMUser"`
	MenuidTTraininglogs     TTraininglogSlice `boil:"MenuidTTraininglogs" json:"MenuidTTraininglogs" toml:"MenuidTTraininglogs" yaml:"MenuidTTraininglogs"`
}

// NewStruct creates a new relationship struct
func (*mMenuR) NewStruct() *mMenuR {
	return &mMenuR{}
}

func (r *mMenuR) GetMusclepartidMMusclepart() *MMusclepart {
	if r == nil {
		return nil
	}
	return r.MusclepartidMMusclepart
}

func (r *mMenuR) GetUseridMUser() *MUser {
	if r == nil {
		return nil
	}
	return r.UseridMUser
}

func (r *mMenuR) GetMenuidTTraininglogs() TTraininglogSlice {
	if r == nil {
		return nil
	}
	return r.MenuidTTraininglogs
}

// mMenuL is where Load methods for each relationship are stored.
type mMenuL struct{}

var (
	mMenuAllColumns            = []string{"menuid", "menuname", "musclepartid", "userid", "status", "regid", "regdate", "updid", "upddate", "version"}
	mMenuColumnsWithoutDefault = []string{"menuname", "musclepartid", "version"}
	mMenuColumnsWithDefault    = []string{"menuid", "userid", "status", "regid", "regdate", "updid", "upddate"}
	mMenuPrimaryKeyColumns     = []string{"menuid"}
	mMenuGeneratedColumns      = []string{}
)

type (
	// MMenuSlice is an alias for a slice of pointers to MMenu.
	// This should almost always be used instead of []MMenu.
	MMenuSlice []*MMenu
	// MMenuHook is the signature for custom MMenu hook methods
	MMenuHook func(context.Context, boil.ContextExecutor, *MMenu) error

	mMenuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mMenuType                 = reflect.TypeOf(&MMenu{})
	mMenuMapping              = queries.MakeStructMapping(mMenuType)
	mMenuPrimaryKeyMapping, _ = queries.BindMapping(mMenuType, mMenuMapping, mMenuPrimaryKeyColumns)
	mMenuInsertCacheMut       sync.RWMutex
	mMenuInsertCache          = make(map[string]insertCache)
	mMenuUpdateCacheMut       sync.RWMutex
	mMenuUpdateCache          = make(map[string]updateCache)
	mMenuUpsertCacheMut       sync.RWMutex
	mMenuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mMenuAfterSelectHooks []MMenuHook

var mMenuBeforeInsertHooks []MMenuHook
var mMenuAfterInsertHooks []MMenuHook

var mMenuBeforeUpdateHooks []MMenuHook
var mMenuAfterUpdateHooks []MMenuHook

var mMenuBeforeDeleteHooks []MMenuHook
var mMenuAfterDeleteHooks []MMenuHook

var mMenuBeforeUpsertHooks []MMenuHook
var mMenuAfterUpsertHooks []MMenuHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MMenu) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMenuAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MMenu) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMenuBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MMenu) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMenuAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MMenu) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMenuBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MMenu) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMenuAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MMenu) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMenuBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MMenu) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMenuAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MMenu) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMenuBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MMenu) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mMenuAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMMenuHook registers your hook function for all future operations.
func AddMMenuHook(hookPoint boil.HookPoint, mMenuHook MMenuHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mMenuAfterSelectHooks = append(mMenuAfterSelectHooks, mMenuHook)
	case boil.BeforeInsertHook:
		mMenuBeforeInsertHooks = append(mMenuBeforeInsertHooks, mMenuHook)
	case boil.AfterInsertHook:
		mMenuAfterInsertHooks = append(mMenuAfterInsertHooks, mMenuHook)
	case boil.BeforeUpdateHook:
		mMenuBeforeUpdateHooks = append(mMenuBeforeUpdateHooks, mMenuHook)
	case boil.AfterUpdateHook:
		mMenuAfterUpdateHooks = append(mMenuAfterUpdateHooks, mMenuHook)
	case boil.BeforeDeleteHook:
		mMenuBeforeDeleteHooks = append(mMenuBeforeDeleteHooks, mMenuHook)
	case boil.AfterDeleteHook:
		mMenuAfterDeleteHooks = append(mMenuAfterDeleteHooks, mMenuHook)
	case boil.BeforeUpsertHook:
		mMenuBeforeUpsertHooks = append(mMenuBeforeUpsertHooks, mMenuHook)
	case boil.AfterUpsertHook:
		mMenuAfterUpsertHooks = append(mMenuAfterUpsertHooks, mMenuHook)
	}
}

// One returns a single mMenu record from the query.
func (q mMenuQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MMenu, error) {
	o := &MMenu{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for m_menu")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MMenu records from the query.
func (q mMenuQuery) All(ctx context.Context, exec boil.ContextExecutor) (MMenuSlice, error) {
	var o []*MMenu

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MMenu slice")
	}

	if len(mMenuAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MMenu records in the query.
func (q mMenuQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count m_menu rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mMenuQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if m_menu exists")
	}

	return count > 0, nil
}

// MusclepartidMMusclepart pointed to by the foreign key.
func (o *MMenu) MusclepartidMMusclepart(mods ...qm.QueryMod) mMusclepartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"musclepartid\" = ?", o.Musclepartid),
	}

	queryMods = append(queryMods, mods...)

	return MMuscleparts(queryMods...)
}

// UseridMUser pointed to by the foreign key.
func (o *MMenu) UseridMUser(mods ...qm.QueryMod) mUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.Userid),
	}

	queryMods = append(queryMods, mods...)

	return MUsers(queryMods...)
}

// MenuidTTraininglogs retrieves all the t_traininglog's TTraininglogs with an executor via menuid column.
func (o *MMenu) MenuidTTraininglogs(mods ...qm.QueryMod) tTraininglogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"muscle_tracking_go\".\"t_traininglog\".\"menuid\"=?", o.Menuid),
	)

	return TTraininglogs(queryMods...)
}

// LoadMusclepartidMMusclepart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mMenuL) LoadMusclepartidMMusclepart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMMenu interface{}, mods queries.Applicator) error {
	var slice []*MMenu
	var object *MMenu

	if singular {
		var ok bool
		object, ok = maybeMMenu.(*MMenu)
		if !ok {
			object = new(MMenu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMMenu))
			}
		}
	} else {
		s, ok := maybeMMenu.(*[]*MMenu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMMenu))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mMenuR{}
		}
		args = append(args, object.Musclepartid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mMenuR{}
			}

			for _, a := range args {
				if a == obj.Musclepartid {
					continue Outer
				}
			}

			args = append(args, obj.Musclepartid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`muscle_tracking_go.m_musclepart`),
		qm.WhereIn(`muscle_tracking_go.m_musclepart.musclepartid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MMusclepart")
	}

	var resultSlice []*MMusclepart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MMusclepart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for m_musclepart")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for m_musclepart")
	}

	if len(mMenuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MusclepartidMMusclepart = foreign
		if foreign.R == nil {
			foreign.R = &mMusclepartR{}
		}
		foreign.R.MusclepartidMMenus = append(foreign.R.MusclepartidMMenus, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Musclepartid == foreign.Musclepartid {
				local.R.MusclepartidMMusclepart = foreign
				if foreign.R == nil {
					foreign.R = &mMusclepartR{}
				}
				foreign.R.MusclepartidMMenus = append(foreign.R.MusclepartidMMenus, local)
				break
			}
		}
	}

	return nil
}

// LoadUseridMUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mMenuL) LoadUseridMUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMMenu interface{}, mods queries.Applicator) error {
	var slice []*MMenu
	var object *MMenu

	if singular {
		var ok bool
		object, ok = maybeMMenu.(*MMenu)
		if !ok {
			object = new(MMenu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMMenu))
			}
		}
	} else {
		s, ok := maybeMMenu.(*[]*MMenu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMMenu))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mMenuR{}
		}
		if !queries.IsNil(object.Userid) {
			args = append(args, object.Userid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mMenuR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Userid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Userid) {
				args = append(args, obj.Userid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`muscle_tracking_go.m_user`),
		qm.WhereIn(`muscle_tracking_go.m_user.userid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MUser")
	}

	var resultSlice []*MUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for m_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for m_user")
	}

	if len(mMenuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridMUser = foreign
		if foreign.R == nil {
			foreign.R = &mUserR{}
		}
		foreign.R.UseridMMenus = append(foreign.R.UseridMMenus, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Userid, foreign.Userid) {
				local.R.UseridMUser = foreign
				if foreign.R == nil {
					foreign.R = &mUserR{}
				}
				foreign.R.UseridMMenus = append(foreign.R.UseridMMenus, local)
				break
			}
		}
	}

	return nil
}

// LoadMenuidTTraininglogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mMenuL) LoadMenuidTTraininglogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMMenu interface{}, mods queries.Applicator) error {
	var slice []*MMenu
	var object *MMenu

	if singular {
		var ok bool
		object, ok = maybeMMenu.(*MMenu)
		if !ok {
			object = new(MMenu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMMenu))
			}
		}
	} else {
		s, ok := maybeMMenu.(*[]*MMenu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMMenu))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mMenuR{}
		}
		args = append(args, object.Menuid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mMenuR{}
			}

			for _, a := range args {
				if a == obj.Menuid {
					continue Outer
				}
			}

			args = append(args, obj.Menuid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`muscle_tracking_go.t_traininglog`),
		qm.WhereIn(`muscle_tracking_go.t_traininglog.menuid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load t_traininglog")
	}

	var resultSlice []*TTraininglog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice t_traininglog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on t_traininglog")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for t_traininglog")
	}

	if len(tTraininglogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MenuidTTraininglogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tTraininglogR{}
			}
			foreign.R.MenuidMMenu = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Menuid == foreign.Menuid {
				local.R.MenuidTTraininglogs = append(local.R.MenuidTTraininglogs, foreign)
				if foreign.R == nil {
					foreign.R = &tTraininglogR{}
				}
				foreign.R.MenuidMMenu = local
				break
			}
		}
	}

	return nil
}

// SetMusclepartidMMusclepart of the mMenu to the related item.
// Sets o.R.MusclepartidMMusclepart to related.
// Adds o to related.R.MusclepartidMMenus.
func (o *MMenu) SetMusclepartidMMusclepart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MMusclepart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"muscle_tracking_go\".\"m_menu\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"musclepartid"}),
		strmangle.WhereClause("\"", "\"", 2, mMenuPrimaryKeyColumns),
	)
	values := []interface{}{related.Musclepartid, o.Menuid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Musclepartid = related.Musclepartid
	if o.R == nil {
		o.R = &mMenuR{
			MusclepartidMMusclepart: related,
		}
	} else {
		o.R.MusclepartidMMusclepart = related
	}

	if related.R == nil {
		related.R = &mMusclepartR{
			MusclepartidMMenus: MMenuSlice{o},
		}
	} else {
		related.R.MusclepartidMMenus = append(related.R.MusclepartidMMenus, o)
	}

	return nil
}

// SetUseridMUser of the mMenu to the related item.
// Sets o.R.UseridMUser to related.
// Adds o to related.R.UseridMMenus.
func (o *MMenu) SetUseridMUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"muscle_tracking_go\".\"m_menu\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
		strmangle.WhereClause("\"", "\"", 2, mMenuPrimaryKeyColumns),
	)
	values := []interface{}{related.Userid, o.Menuid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Userid, related.Userid)
	if o.R == nil {
		o.R = &mMenuR{
			UseridMUser: related,
		}
	} else {
		o.R.UseridMUser = related
	}

	if related.R == nil {
		related.R = &mUserR{
			UseridMMenus: MMenuSlice{o},
		}
	} else {
		related.R.UseridMMenus = append(related.R.UseridMMenus, o)
	}

	return nil
}

// RemoveUseridMUser relationship.
// Sets o.R.UseridMUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MMenu) RemoveUseridMUser(ctx context.Context, exec boil.ContextExecutor, related *MUser) error {
	var err error

	queries.SetScanner(&o.Userid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("userid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UseridMUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UseridMMenus {
		if queries.Equal(o.Userid, ri.Userid) {
			continue
		}

		ln := len(related.R.UseridMMenus)
		if ln > 1 && i < ln-1 {
			related.R.UseridMMenus[i] = related.R.UseridMMenus[ln-1]
		}
		related.R.UseridMMenus = related.R.UseridMMenus[:ln-1]
		break
	}
	return nil
}

// AddMenuidTTraininglogs adds the given related objects to the existing relationships
// of the m_menu, optionally inserting them as new records.
// Appends related to o.R.MenuidTTraininglogs.
// Sets related.R.MenuidMMenu appropriately.
func (o *MMenu) AddMenuidTTraininglogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TTraininglog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Menuid = o.Menuid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"muscle_tracking_go\".\"t_traininglog\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"menuid"}),
				strmangle.WhereClause("\"", "\"", 2, tTraininglogPrimaryKeyColumns),
			)
			values := []interface{}{o.Menuid, rel.Logid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Menuid = o.Menuid
		}
	}

	if o.R == nil {
		o.R = &mMenuR{
			MenuidTTraininglogs: related,
		}
	} else {
		o.R.MenuidTTraininglogs = append(o.R.MenuidTTraininglogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tTraininglogR{
				MenuidMMenu: o,
			}
		} else {
			rel.R.MenuidMMenu = o
		}
	}
	return nil
}

// MMenus retrieves all the records using an executor.
func MMenus(mods ...qm.QueryMod) mMenuQuery {
	mods = append(mods, qm.From("\"muscle_tracking_go\".\"m_menu\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"muscle_tracking_go\".\"m_menu\".*"})
	}

	return mMenuQuery{q}
}

// FindMMenu retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMMenu(ctx context.Context, exec boil.ContextExecutor, menuid int, selectCols ...string) (*MMenu, error) {
	mMenuObj := &MMenu{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"muscle_tracking_go\".\"m_menu\" where \"menuid\"=$1", sel,
	)

	q := queries.Raw(query, menuid)

	err := q.Bind(ctx, exec, mMenuObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from m_menu")
	}

	if err = mMenuObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mMenuObj, err
	}

	return mMenuObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MMenu) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no m_menu provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mMenuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mMenuInsertCacheMut.RLock()
	cache, cached := mMenuInsertCache[key]
	mMenuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mMenuAllColumns,
			mMenuColumnsWithDefault,
			mMenuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mMenuType, mMenuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mMenuType, mMenuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"muscle_tracking_go\".\"m_menu\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"muscle_tracking_go\".\"m_menu\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into m_menu")
	}

	if !cached {
		mMenuInsertCacheMut.Lock()
		mMenuInsertCache[key] = cache
		mMenuInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MMenu.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MMenu) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mMenuUpdateCacheMut.RLock()
	cache, cached := mMenuUpdateCache[key]
	mMenuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mMenuAllColumns,
			mMenuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update m_menu, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"m_menu\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mMenuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mMenuType, mMenuMapping, append(wl, mMenuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update m_menu row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for m_menu")
	}

	if !cached {
		mMenuUpdateCacheMut.Lock()
		mMenuUpdateCache[key] = cache
		mMenuUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mMenuQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for m_menu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for m_menu")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MMenuSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"muscle_tracking_go\".\"m_menu\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mMenuPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in mMenu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all mMenu")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MMenu) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no m_menu provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mMenuColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mMenuUpsertCacheMut.RLock()
	cache, cached := mMenuUpsertCache[key]
	mMenuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mMenuAllColumns,
			mMenuColumnsWithDefault,
			mMenuColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mMenuAllColumns,
			mMenuPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert m_menu, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mMenuPrimaryKeyColumns))
			copy(conflict, mMenuPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"muscle_tracking_go\".\"m_menu\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mMenuType, mMenuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mMenuType, mMenuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert m_menu")
	}

	if !cached {
		mMenuUpsertCacheMut.Lock()
		mMenuUpsertCache[key] = cache
		mMenuUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MMenu record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MMenu) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MMenu provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mMenuPrimaryKeyMapping)
	sql := "DELETE FROM \"muscle_tracking_go\".\"m_menu\" WHERE \"menuid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from m_menu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for m_menu")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mMenuQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no mMenuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from m_menu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for m_menu")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MMenuSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mMenuBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"muscle_tracking_go\".\"m_menu\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mMenuPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mMenu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for m_menu")
	}

	if len(mMenuAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MMenu) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMMenu(ctx, exec, o.Menuid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MMenuSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MMenuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"muscle_tracking_go\".\"m_menu\".* FROM \"muscle_tracking_go\".\"m_menu\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mMenuPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MMenuSlice")
	}

	*o = slice

	return nil
}

// MMenuExists checks if the MMenu row exists.
func MMenuExists(ctx context.Context, exec boil.ContextExecutor, menuid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"muscle_tracking_go\".\"m_menu\" where \"menuid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, menuid)
	}
	row := exec.QueryRowContext(ctx, sql, menuid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if m_menu exists")
	}

	return exists, nil
}
